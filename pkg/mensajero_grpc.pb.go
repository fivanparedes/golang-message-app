// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pkg/mensajero.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MensajeroClient is the client API for Mensajero service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MensajeroClient interface {
	// El usuario recibe un token de conexión. Este token de conexión se pasa implícitamente como
	// metadatos en todas las demás llamadas y es validado por un interceptor del lado del servidor.
	Conectar(ctx context.Context, in *Registracion, opts ...grpc.CallOption) (*TokenAutenticacion, error)
	// El usuario envía un mensaje a otro usuario.
	Enviar(ctx context.Context, in *MensajeApp, opts ...grpc.CallOption) (*Correcto, error)
	// El usuario obtiene todos los mensajes dirigidos a El en lotes. El tamaño del lote es
	// definido por el servidor que implementa esta RPC, los clientes no pueden controlarlo.
	Obtener(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*MensajesApp, error)
	// El usuario obtiene una lista de los usuarios actualmente activos.
	Listar(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaUsuarios, error)
	// Enviado por el usuario para informar al servidor que se va. Luego, el servidor puede
	// optar por hacer algo con la acumulación de mensajes que quedan en la cola de la bandeja de
	// entrada del usuario que aún no se han leído; para esta práctica, simplemente los eliminaremos.
	// También invalida el token de autenticación utilizado por el usuario.
	Desconectar(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Correcto, error)
}

type mensajeroClient struct {
	cc grpc.ClientConnInterface
}

func NewMensajeroClient(cc grpc.ClientConnInterface) MensajeroClient {
	return &mensajeroClient{cc}
}

func (c *mensajeroClient) Conectar(ctx context.Context, in *Registracion, opts ...grpc.CallOption) (*TokenAutenticacion, error) {
	out := new(TokenAutenticacion)
	err := c.cc.Invoke(ctx, "/mensajero.Mensajero/Conectar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mensajeroClient) Enviar(ctx context.Context, in *MensajeApp, opts ...grpc.CallOption) (*Correcto, error) {
	out := new(Correcto)
	err := c.cc.Invoke(ctx, "/mensajero.Mensajero/Enviar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mensajeroClient) Obtener(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*MensajesApp, error) {
	out := new(MensajesApp)
	err := c.cc.Invoke(ctx, "/mensajero.Mensajero/Obtener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mensajeroClient) Listar(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaUsuarios, error) {
	out := new(ListaUsuarios)
	err := c.cc.Invoke(ctx, "/mensajero.Mensajero/Listar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mensajeroClient) Desconectar(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Correcto, error) {
	out := new(Correcto)
	err := c.cc.Invoke(ctx, "/mensajero.Mensajero/Desconectar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MensajeroServer is the server API for Mensajero service.
// All implementations must embed UnimplementedMensajeroServer
// for forward compatibility
type MensajeroServer interface {
	// El usuario recibe un token de conexión. Este token de conexión se pasa implícitamente como
	// metadatos en todas las demás llamadas y es validado por un interceptor del lado del servidor.
	Conectar(context.Context, *Registracion) (*TokenAutenticacion, error)
	// El usuario envía un mensaje a otro usuario.
	Enviar(context.Context, *MensajeApp) (*Correcto, error)
	// El usuario obtiene todos los mensajes dirigidos a El en lotes. El tamaño del lote es
	// definido por el servidor que implementa esta RPC, los clientes no pueden controlarlo.
	Obtener(context.Context, *Vacio) (*MensajesApp, error)
	// El usuario obtiene una lista de los usuarios actualmente activos.
	Listar(context.Context, *Vacio) (*ListaUsuarios, error)
	// Enviado por el usuario para informar al servidor que se va. Luego, el servidor puede
	// optar por hacer algo con la acumulación de mensajes que quedan en la cola de la bandeja de
	// entrada del usuario que aún no se han leído; para esta práctica, simplemente los eliminaremos.
	// También invalida el token de autenticación utilizado por el usuario.
	Desconectar(context.Context, *Vacio) (*Correcto, error)
	mustEmbedUnimplementedMensajeroServer()
}

// UnimplementedMensajeroServer must be embedded to have forward compatible implementations.
type UnimplementedMensajeroServer struct {
}

func (UnimplementedMensajeroServer) Conectar(context.Context, *Registracion) (*TokenAutenticacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conectar not implemented")
}
func (UnimplementedMensajeroServer) Enviar(context.Context, *MensajeApp) (*Correcto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enviar not implemented")
}
func (UnimplementedMensajeroServer) Obtener(context.Context, *Vacio) (*MensajesApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obtener not implemented")
}
func (UnimplementedMensajeroServer) Listar(context.Context, *Vacio) (*ListaUsuarios, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listar not implemented")
}
func (UnimplementedMensajeroServer) Desconectar(context.Context, *Vacio) (*Correcto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Desconectar not implemented")
}
func (UnimplementedMensajeroServer) mustEmbedUnimplementedMensajeroServer() {}

// UnsafeMensajeroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MensajeroServer will
// result in compilation errors.
type UnsafeMensajeroServer interface {
	mustEmbedUnimplementedMensajeroServer()
}

func RegisterMensajeroServer(s grpc.ServiceRegistrar, srv MensajeroServer) {
	s.RegisterService(&Mensajero_ServiceDesc, srv)
}

func _Mensajero_Conectar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registracion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeroServer).Conectar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mensajero.Mensajero/Conectar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeroServer).Conectar(ctx, req.(*Registracion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensajero_Enviar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeroServer).Enviar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mensajero.Mensajero/Enviar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeroServer).Enviar(ctx, req.(*MensajeApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensajero_Obtener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeroServer).Obtener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mensajero.Mensajero/Obtener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeroServer).Obtener(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensajero_Listar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeroServer).Listar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mensajero.Mensajero/Listar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeroServer).Listar(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mensajero_Desconectar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MensajeroServer).Desconectar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mensajero.Mensajero/Desconectar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MensajeroServer).Desconectar(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

// Mensajero_ServiceDesc is the grpc.ServiceDesc for Mensajero service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mensajero_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mensajero.Mensajero",
	HandlerType: (*MensajeroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Conectar",
			Handler:    _Mensajero_Conectar_Handler,
		},
		{
			MethodName: "Enviar",
			Handler:    _Mensajero_Enviar_Handler,
		},
		{
			MethodName: "Obtener",
			Handler:    _Mensajero_Obtener_Handler,
		},
		{
			MethodName: "Listar",
			Handler:    _Mensajero_Listar_Handler,
		},
		{
			MethodName: "Desconectar",
			Handler:    _Mensajero_Desconectar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/mensajero.proto",
}
